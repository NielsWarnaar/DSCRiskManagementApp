@page "/UpdateControl"

@inject HttpClient Http
@inject ControlService ControlService
@inject NavigationManager NavigationManager
@inject ControlBean ControlBean
@inject RiskService RiskService
@using RiskManagementAppSharedUI.Beans
@using RiskManagementAppSharedUI.Models
@using RiskManagementAppSharedUI.Services
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]

<PageTitle>Update control</PageTitle>

<h3>Update control</h3>

@if (Control == null)
{
    <h4>Loading...</h4>
}
else
{
    <EditForm Model="control" OnValidSubmit="@Update">

        <div>
            <label>ControlName</label>
            <InputText class="forn-control" id="ControlName" @bind-Value="control.ControlName" placeholder="@Control.ControlName" />
        </div>

        <div>
            <label>ControlDescription</label>
            <InputText class="forn-control" id="ControlDescription" @bind-Value="control.ControlDescription" placeholder="@Control.ControlDescription" />
        </div>

        <div>
            <label>ControlType</label>
            <InputText class="forn-control" id="ControlType" @bind-Value="control.ControlType" placeholder="@Control.ControlType" />
        </div>

        <div>
            <label>Risico</label>
            <InputSelect id="Risk" @bind-Value="control.RiskId" placeholder="@control.RiskId">
                @if (Risks == null)
                {
                    <h4>Loading...</h4>
                }
                else
                {
                    @foreach (var risk in Risks)
                    {
                        <option value="@risk.RiskId">@risk.RiskName</option>
                    }
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Update control</button>

    </EditForm>
}

@code {
    private int ControlId { get; set; }
    public Control Control { get; set; } = new();
    private Control control = new();
    private IEnumerable<Risk>? Risks { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ControlId = ControlBean.GetControlId();
        control.ControlId = ControlId;
    }

    protected override async Task OnInitializedAsync()
    {
        Control = await ControlService.GetControl(ControlId);
        Risks = await RiskService.GetRisks();
    }

    private async Task Update()
    {
        var response = await Http.PutAsJsonAsync($"api/Controls/{ControlId}", control);
        NavigationManager.NavigateTo("/Controls", true);
    }
}
